// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SWD392_BloodDonationSystem.DAL.Context;

#nullable disable

namespace SWD392_BloodDonationSystem.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250531152946_AddScheduledDateToAvailableDonateDate")]
    partial class AddScheduledDateToAvailableDonateDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.AuditLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("LogID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("TargetID")
                        .HasColumnType("integer");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("LogID")
                        .HasName("AuditLogs_pkey");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.AvailableDonateDate", b =>
                {
                    b.Property<int>("AvailableDateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("AvailableDateID"));

                    b.Property<bool>("AcceptEmergency")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("AvailableDateID")
                        .HasName("AvailableDonateDates_pkey");

                    b.HasIndex("UserID");

                    b.ToTable("AvailableDonateDate");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("BlogID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("BlogID")
                        .HasName("Blogs_pkey");

                    b.HasIndex("AuthorID");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodDonation", b =>
                {
                    b.Property<int>("DonationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("DonationID"));

                    b.Property<int>("BloodGroupID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DonationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("FullBloodUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlasmaUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("PlateletUnit")
                        .HasColumnType("integer");

                    b.Property<int?>("RedCellUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("DonationID")
                        .HasName("BloodDonations_pkey");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("UserID");

                    b.ToTable("BloodDonation");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("BloodGroupID"));

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CanDonateTo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CanReceiveFrom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("BloodGroupID")
                        .HasName("BloodGroup_pkey");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodMatchingLog", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("MatchID"));

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("integer");

                    b.Property<int>("DonorID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("MatchID")
                        .HasName("BloodMatchingLogs_pkey");

                    b.HasIndex("AppointmentID")
                        .IsUnique();

                    b.HasIndex("DonorID");

                    b.HasIndex("RequestID")
                        .IsUnique();

                    b.ToTable("BloodMatchingLog");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RequestID"));

                    b.Property<int>("BloodGroupID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MatchedDonorID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NeededDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequesterID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("RequestID")
                        .HasName("BloodRequests_pkey");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("MatchedDonorID");

                    b.HasIndex("RequesterID");

                    b.ToTable("BloodRequest");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodTypeCertificate", b =>
                {
                    b.Property<int>("CertificateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CertificateID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BloodDonationCenter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CitizenID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("DonatedVolumn")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ImageProof")
                        .HasColumnType("integer");

                    b.Property<int>("SeriNumber")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("CertificateID")
                        .HasName("BloodTypeCertificate_pkey");

                    b.HasIndex("UserID");

                    b.ToTable("BloodTypeCertificate");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationAppointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DonationFormID")
                        .HasColumnType("integer");

                    b.Property<int>("DonationScheduleID")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentID")
                        .HasName("DonationAppointments_pkey");

                    b.HasIndex("DonationFormID")
                        .IsUnique();

                    b.HasIndex("DonationScheduleID");

                    b.HasIndex("UserID");

                    b.ToTable("DonationAppointment");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationForm", b =>
                {
                    b.Property<int>("DonationFormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("DonationFormID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DangerousIllness")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FourteenDayProblem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Illness")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDonated")
                        .HasColumnType("boolean");

                    b.Property<string>("OneMonthProblem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SevenDayProblem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SixMonthProblem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TwelveMonthProblem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("WomanProblem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("DonationFormID")
                        .HasName("DonationForms_pkey");

                    b.ToTable("DonationForm");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationSchedule", b =>
                {
                    b.Property<int>("DonationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("DonationTime"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("DonationTime")
                        .HasName("DonationSchedule_pkey");

                    b.HasIndex("CreatedBy");

                    b.ToTable("DonationSchedule");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ImageID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer");

                    b.HasKey("ImageID")
                        .HasName("Image_pkey");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ReminderID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("LastDonationDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("NextEligibleDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ReminderID")
                        .HasName("Reminders_pkey");

                    b.HasIndex("UserID");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ReportID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date");

                    b.Property<int>("GeneratedBy")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("ReportID")
                        .HasName("Reports_pkey");

                    b.HasIndex("GeneratedBy");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RoleID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleID")
                        .HasName("Roles_pkey");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.SystemSetting", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SettingID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ImageID")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SettingID")
                        .HasName("SystemSettings_pkey");

                    b.ToTable("SystemSetting");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("UserID"));

                    b.Property<int?>("BloodGroupID")
                        .HasColumnType("integer");

                    b.Property<int?>("CitizenCardBack")
                        .HasColumnType("integer");

                    b.Property<int?>("CitizenCardFront")
                        .HasColumnType("integer");

                    b.Property<string>("CitizenID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Latitude")
                        .HasColumnType("integer");

                    b.Property<int?>("Longitude")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserID")
                        .HasName("Users_pkey");

                    b.HasIndex("BloodGroupID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("UserRoleID"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("UserRoleID")
                        .HasName("UserRoles_pkey");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.AuditLog", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_AuditLogs_UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.AvailableDonateDate", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("AvailableDonateDates")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_AvailableDonateDates_UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Blog", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID")
                        .IsRequired()
                        .HasConstraintName("FK_Blogs_AuthorID");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodDonation", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodGroup", "BloodGroup")
                        .WithMany("BloodDonations")
                        .HasForeignKey("BloodGroupID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodDonations_BloodGroupID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("BloodDonations")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodDonations_UserID");

                    b.Navigation("BloodGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodMatchingLog", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationAppointment", "Appointment")
                        .WithOne("BloodMatchingLog")
                        .HasForeignKey("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodMatchingLog", "AppointmentID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BloodMatchingLogs_AppointmentID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "Donor")
                        .WithMany("BloodMatchingLogs")
                        .HasForeignKey("DonorID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodMatchingLogs_DonorID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodRequest", "Request")
                        .WithOne("BloodMatchingLog")
                        .HasForeignKey("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodMatchingLog", "RequestID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodMatchingLogs_RequestID");

                    b.Navigation("Appointment");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodRequest", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodGroup", "BloodGroup")
                        .WithMany("BloodRequests")
                        .HasForeignKey("BloodGroupID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequests_BloodGroupID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "MatchedDonor")
                        .WithMany("BloodRequestMatchedDonors")
                        .HasForeignKey("MatchedDonorID")
                        .HasConstraintName("FK_BloodRequests_MatchedDonorID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "Requester")
                        .WithMany("BloodRequestRequesters")
                        .HasForeignKey("RequesterID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodRequests_RequesterID");

                    b.Navigation("BloodGroup");

                    b.Navigation("MatchedDonor");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodTypeCertificate", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("BloodTypeCertificates")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_BloodTypeCertificate_UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationAppointment", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationForm", "DonationForm")
                        .WithOne("Appointment")
                        .HasForeignKey("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationAppointment", "DonationFormID")
                        .HasConstraintName("FK_DonationAppointments_DonationFormID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationSchedule", "DonationSchedule")
                        .WithMany("DonationAppointments")
                        .HasForeignKey("DonationScheduleID")
                        .IsRequired()
                        .HasConstraintName("FK_DonationAppointments_DonationScheduleID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("DonationAppointments")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_DonationAppointments_UserID");

                    b.Navigation("DonationForm");

                    b.Navigation("DonationSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationSchedule", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "CreatedByNavigation")
                        .WithMany("DonationSchedules")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DonationSchedule_CreatedBy");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Image", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "UploadedByNavigation")
                        .WithMany("Images")
                        .HasForeignKey("UploadedBy")
                        .HasConstraintName("FK_Image_UploadedBy");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Reminder", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_Reminders_UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Report", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "GeneratedByNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("GeneratedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_GeneratedBy");

                    b.Navigation("GeneratedByNavigation");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.User", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodGroup", "BloodGroup")
                        .WithMany("Users")
                        .HasForeignKey("BloodGroupID")
                        .HasConstraintName("FK_Users_BloodGroupID");

                    b.Navigation("BloodGroup");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.UserRole", b =>
                {
                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_RoleID");

                    b.HasOne("SWD392_BloodDonationSystem.DAL.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_UserID");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodGroup", b =>
                {
                    b.Navigation("BloodDonations");

                    b.Navigation("BloodRequests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.BloodRequest", b =>
                {
                    b.Navigation("BloodMatchingLog")
                        .IsRequired();
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationAppointment", b =>
                {
                    b.Navigation("BloodMatchingLog")
                        .IsRequired();
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationForm", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.DonationSchedule", b =>
                {
                    b.Navigation("DonationAppointments");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SWD392_BloodDonationSystem.DAL.Data.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("AvailableDonateDates");

                    b.Navigation("Blogs");

                    b.Navigation("BloodDonations");

                    b.Navigation("BloodMatchingLogs");

                    b.Navigation("BloodRequestMatchedDonors");

                    b.Navigation("BloodRequestRequesters");

                    b.Navigation("BloodTypeCertificates");

                    b.Navigation("DonationAppointments");

                    b.Navigation("DonationSchedules");

                    b.Navigation("Images");

                    b.Navigation("Reminders");

                    b.Navigation("Reports");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
